for (i in 1:3) {
vec[i]*3
} <- 0
# if you want to create a vector vec2, in which you store the values produced at each iteration of the loop
vec <- c(7,8,9)
vec2 <- rep(empty, length(vec))
# if you want to create a vector vec2, in which you store the values produced at each iteration of the loop
vec <- c(7,8,9)
vec2 <- rep(x, length(vec))
for (i in 1:3) {
x <- print(vec[i]*3)
}
vec2
# if you want to create a vector vec2, in which you store the values produced at each iteration of the loop
vec <- c(7,8,9)
vec2 <- rep(0, length(vec))
for (i in 1:3) {
print(vec[i]*3)
}
vec2
# if you want to create a vector vec2, in which you store the values produced at each iteration of the loop
vec <- c(7,8,9)
vec2 <- rep(0, length(vec))
for (i in 1:3) {
print(vec[i]*3)
}
vec2
# if you want to create a vector vec2, in which you store the values produced at each iteration of the loop
vec <- c(7,8,9)
vec2 <- rep(0, length(vec))
for (i in 1:3) {
print(vec[i]*3)
}
vec2
k <- 0
n <- 100
for(i in 1:n){
sum=1/2^k
k=k+1
}
print(sum)
k <- 0
n <- 2
for(i in 1:n){
sum=1/2^k
k=k+1
}
print(sum)
k <- 0
n <- 2
for(k in 1:n){
sum=1/2^k
k=k+1
}
print(sum)
k <- 0
n <- 2
for(k in 0:n){
sum=1/2^k
k=k+1
}
print(sum)
k <- 0
n <- 2
for(k in 0:n){
sum=1/2^k+sum
}
print(sum)
k <- 0
n <- 2
for(k in 0:n-1){
sum=1/2^k+sum
}
print(sum)
k <- 0
n <- 2
for(k in 0:n){
sum=1/2^k+sum
}
print(sum)
for(k in 0:n){
sum=1/2^k + sum
}
print(sum)
for(k in 0:n){
sum=1/2^k + sum
}
print(sum)
for(k in 0:n){
sum=1/2^k + sum
}
print(sum)
for(k in 0:n){
sum=1/2^k + sum
}
print(sum)
for(k in 0:n){
sum=(1/2^k )+ sum
}
print(sum)
knitr::opts_chunk$set(echo = TRUE)
head(USArrests)
states <- rownames(USArrests)
head(states)
nchar(states)
casefold()
?casefold
tolower(states)
toupper(states)
casefold(states,upper = TRUE)
casefold(states,upper = FALSE)
# number of charcaters
num_chars <- nchar(states)
char_freq <- table(num_chars)
# number of charcaters
num_chars <- nchar(states)
char_freq <- table(num_chars)
char_freq
?list
# number of charcaters
num_chars <- nchar(states)
char_freq <- data.frame(states,num_chars)
char_freq
?plot
?barplot
# plot
barplot(char_freq)
# plot
barplot(num_chars,names.arg = states)
# plot
barplot(num_chars,names.arg = states,las=2)
# plot
barplot(num_chars,names.arg = states,las=2,cex.names = 0.6)
# plot
barplot(num_chars,names.arg = states,las=2,cex.names = 0.8)
# plot
barplot(num_chars,names.arg = states,las=2,cex.names = 0.8,xlab = "States",ylab="Frequency",main = "barplot of length of states character")
# plot
barplot(num_chars,names.arg = states,las=2,cex.names = 0.8,ylab="Length",main = "barplot of length of states character")
# Use paste() to form a new vector with the first five states and their number.
paste(head(row.names(char_freq),5),"=")
# Use paste() to form a new vector with the first five states and their number.
paste(head(char_freq[states],5),"=")
library(dplyr)
# Use paste() to form a new vector with the first five states and their number.
paste(select(char_freq,states)[5,],"=",select(char_freq,num_chars)[5,])
library(dplyr)
# Use paste() to form a new vector with the first five states and their number.
paste(select(char_freq,states)[1:5,],"=",select(char_freq,num_chars)[1:5,])
?paste
#  use paste()'s argument collapse = '' to collapse the first five states.
paste(char_freq[1:5,1],collapse = '')
# extract first 3 characters
substr('Berkeley', 1, 3)
# shorten state names with first 3 characters
substr(states, 1, 3)
substr(states,-4,-1)
substr(states,length(states)-3,length(states))
substrRight(states,3)
substrRight(states,nchar(states)-3,nchar(states))
substr(states,nchar(states)-3,nchar(states))
substr(states,nchar(states)-2,nchar(states))
# 4-char states
states[num_chars == 4]
# 10-char states
states[num_chars == 10]
# collapse 4-char states
paste(states[num_chars == 4], collapse = ", ")
## [1] "Iowa, Ohio, Utah"
?sort
sort(char_freq)
char_freq[order(num_chars),]
group_by(char_freq,num_chars)
?%
?"%"
??%?
??'%'
5%2
# states_list containing the collapsed names by number of characters.
for(i in 1:length(states)){
if(states[[i]][num_chars %% 2 == 0]){
toupper(states)
}else{
tolower(states)
}
}
?na.omit
function(x,na.rm = TRUE){
return(x)
}
function(x,na.rm = TRUE){
return(x)
}
remove_missing <- function(x,na.rm = TRUE){
return(x)
}
a <- c(1,2,NA)
remove_missing(a)
remove_missing <- function(x,na.rm = TRUE){
return(x,na.rm=TRUE)
}
remove_missing(a)
is.na()
is.na(a)
remove_missing <- function(x){
x <- x[!is.na(x)]
}
remove_missing(a)
remove_missing <- function(x){
x <- x[!is.na(x)]
return(x)
}
remove_missing(a)
sort(a)
a
get_minimum <- function(x,na.rm = TRUE){
x <- remove_missing(x)
if(is.numeric(x)){
min <- sort(x)[1]
return(min)
} else{
print("non-numeric vector")
}
}
a <- c(0,1,2,3)
get_minimum(a)
get_minimum <- function(x,na.rm = TRUE){
x <- remove_missing(x)
if(is.numeric(x)){
min <- sort(x)[1]
return(min)
} else{
print("non-numeric vector")
}
}
x <- c(0,1,2,3)
get_minimum(x)
get_minimum <- function(x,na.rm = TRUE){
x <- remove_missing(x)
if(is.numeric(x)){
min <- sort(x)[1]
return(min)
} else{
print("non-numeric vector")
}
}
b <- c(0,1,2,3)
get_minimum(b)
get_maximum <- function(x,na.rm=TRUE){
x <- remove_missing(x)
if(is.numeric(x)){
max <- sort(x,decreasing = TRUE)[1]
return(max)
}else{
print("non-numeric vector")
}
}
get_maximum(b)
get_range(b)
get_range <- function(x,na.rm=TRUE){
x <- remove_missing(x)
if(is.numeric(x)){
range <- get_maximum(x)-get_minimum(x)
return(range)
}else{
print("non-numeric vector")
}
}
get_range(b)
a
b
a
a <- c(1, 4, 7, NA, 10)
a
mean(a)
get_minimum(a,na.rm = FALSE)
get_range <- function(x,na.rm=TRUE){
x <- remove_missing(x)
if(is.numeric(x)){
range <- get_maximum(x)-get_minimum(x)
return(range)
}else{
stop("non-numeric vector")
}
}
c <- c("a","b")
get_range(c)
(x[length(x)/2]+x[length(x)/2 + 1])/2
x
b
a
get_median <- function(x,na.rm=TRUE){
x <- remove_missing(x)
if(is.numeric(x)){
if(length(x)%%2==0){
med <- (x[length(x)/2]+x[length(x)/2 + 1])/2
}else{
med <- x[(length(x)+1)/2]
}
}else{
stop("non-numeric vector")
}
}
get_median(b)
get_median(a)
get_median <- function(x,na.rm=TRUE){
x <- remove_missing(x)
if(is.numeric(x)){
if(length(x)%%2==0){
med <- (x[length(x)/2]+x[length(x)/2 + 1])/2
}else{
med <- x[(length(x)+1)/2]
}
}else{
stop("non-numeric vector")
}
}
get_median(b)
get_median(a)
get_median <- function(x,na.rm=TRUE){
x <- remove_missing(x)
if(is.numeric(x)){
if(length(x)%%2==0){
med <- (x[length(x)/2]+x[length(x)/2 + 1])/2
}else{
med <- x[(length(x)+1)/2]
}
}else{
stop("non-numeric vector")
}
return(med)
}
get_median(b)
get_median(a)
library(forecast)
install.packages("forecast")
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
data()
AirPassengers
BJsales
CO2
EuStockMarkets
DNase
airmiles
beaver1
co2
nottem
data(nottem)
dat <- data("nottem")
dat
dat <- data(nottem)
dat
dat <- nottem
dat
dat <- nottem
dat <- nottem
dat
dat <- nottem
head(dat)
dat <- nottem
dat
dat[1,1]
dat[2]
dat
dat[3,3]
dat <- as.data.frame(nottem)
dat[1,2]
dat[2]
dat[2,3]
dat
dat
as.array(nottem)
as.array(nottem)[2,2]
as.data.frame.integer(nottem)
read.csv(nottem)
read.csv("nottem")
class(nottem)
dat <- nottem
head(dat)
class(dat)
dat
ts(dat,start = c(1920,1),frequency = 10)
ts(dat,start = c(1920,12),frequency = 10)
autoplot(ts,facets=FALSE)
library(forecast)
library(ggplot2)
autoplot(ts,facets=FALSE)
?autoplot
autoplot(dat)
autoplot(dat,facets=FALSE)
autoplot(dat,facets=FALSE)
# with faceting
autoplot(dat, facets= TRUE)
?set.seed
time(dat)
data.frame(time=c(time(dat)),dat=c(dat))
dat <- data.frame(time=c(time(nottem)),tem=c(nottem))
dat
?ts
head(nottem)
head(dat)
myts <- ts(dat[,2],start = c(1920.000,1),frequency = 12)
myts
# with faceting
autoplot(dat, facets= TRUE)
# with faceting
autoplot(myts, facets= TRUE)
?autoplot
head(nottem)
head(dat)
myts <- ts(dat[,2],start = c(1920.000,1),frequency = 12)
# with no facetting
autoplot(myts,facets=FALSE)
ggseasonplot(myst)
ggseasonplot(myts)
library(forecast)
ggseasonplot(myts)
ggseasonplot(myts)
ggseasonplot(myts)
ggseasonplot(myts)
# polar = TRUE
ggseasonplot(myts, polar = TRUE)
Box.test(myts)
ggAcf(myts)
install.packages("forecast")
install.packages("forecast")
getwd()
setwd('C:/Users/eriko/stat133/stat133-hws-fall17/post02')
pdf("./image/autoplot.pdf")
autoplot(myts,facets=FALSE)
dev.off()
ggseasonplot(myts)+ylab('temperature')
ggseasonplot(myts)+ylab('temperature')+ggtitle("Seasonal plot of temperature by month")
pdf("./image/seasonal_plot.pdf")
ggseasonplot(myts)+ylab('temperature')+ggtitle("Seasonal plot of temperature by month")
dev.off()
pdf("./image/seasonal_plot_polar.pdf")
ggseasonplot(myts, polar = TRUE)+ylab("temperature")+ggtitle("polar seasonal plot")
dev.off()
ggAcf(myts)+ylab("ACF of temperature")+ggtitle("Autocorrelation function graph")
# polar = TRUE
ggseasonplot(myts, polar = TRUE)+ylab("temperature")+ggtitle("polar seasonal plot")
pdf("./image/ACF.pdf")
ggAcf(myts)+ylab("ACF of temperature")+ggtitle("Autocorrelation function graph")
dev.off()
sink("./output/Box_test")
Box.test(myts)
sink()
ndiffs(myts)
?arima
arima(myts, seasonal = list(order = c(1,1,1),period=NA))
?adf.test
?trunc
adf.test(myts,alternatice="stationary",k= trunc((length(myts)-1)^(1/3)))
library(forecast)
library(ggplot2)
library(tseries)
adf.test(myts,alternatice="stationary",k= trunc((length(myts)-1)^(1/3)))
adf.test(myts,alternative="stationary",k= trunc((length(myts)-1)^(1/3)))
# arima model
fit <- arima(myts, order=c(p, d, q))
# arima model
fit <- arima(myts, seasonal = list(order=c(1, 1, 1),period = 12))
# arima model
fit <- arima(myts, seasonal = list(order=c(1, 1, 1),period = 12))
accuracy(fit)
forecast(fit, 5)
autoplot(forecast(fit, 5))
forecast(fit, 5)
autoplot(forecast(fit, 5))
# arima model
fit <- arima(myts, seasonal = list(order=c(0,0,0),period = 12))
accuracy(fit)
forecast(fit, 5)
autoplot(forecast(fit, 5))
# arima model
fit <- arima(myts, seasonal = list(order=c(1,1,1),period = 12))
accuracy(fit)
forecast(fit, 5)
autoplot(forecast(fit, 5))
ggseasonplot(forecast(fit, 5))
ggseasonplot(x=forecast(fit, 5))
library(forecast)
library(ggplot2)
library(tseries)
head(nottem)
head(dat)
myts <- ts(dat[,2],start = c(1920.000,1),frequency = 12)
# with no facetting
autoplot(myts,facets=FALSE)
# with no facetting
autoplot(myts,facets=FALSE)
ggseasonplot(myts)+ylab('temperature')+ggtitle("Seasonal plot of temperature by month")
sink("./outcome/arima_model")
getwd
getwd()
sink()
sink("./output/arima")
arima(myts, seasonal = list(order=c(1,1,1),period = 12))
accuracy(fit)
sink()
sink("./output/forecast")
forecast(fit, 5)
sink
sink()
pdf("./image/autoplot_forecast.pdf")
autoplot(forecast(fit, 5))
dev.off()
sink("./data/nottem")
nottem
sink()
