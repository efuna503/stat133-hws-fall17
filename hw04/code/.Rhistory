test_that("get_quartile1 works",{
a <- c(1, 2, 3)
b <- c(1, 2, 3, NA)
expect_equal(get_quartile1(a),quantile(a,0.25))
expect_equal(get_quartile1(b),quantile(b,0.25,na.rm = TRUE))
})
get_quartile1(a)
context("Get quartile one")
test_that("get_quartile1 works",{
a <- c(1, 2, 3)
b <- c(1, 2, 3, NA)
expect_equal(get_quartile1(a),quantile(a,0.25)[1])
expect_equal(get_quartile1(b),quantile(b,0.25,na.rm = TRUE)[1])
})
context("Get quartile one")
test_that("get_quartile1 works",{
a <- c(1, 2, 3)
b <- c(1, 2, 3, NA)
expect_equal(get_quartile1(a),quantile(a,0.25)[[1]])
expect_equal(get_quartile1(b),quantile(b,0.25,na.rm = TRUE)[[1]])
})
context("Get quartile three")
test_that("get_quartile3 works",{
a <- c(1, 2, 3)
b <- c(1, 2, 3, NA)
expect_equal(get_quartile3(a),quantile(a,0.75)[[1]])
expect_equal(get_quartile3(b),quantile(b,0.75,na.rm = TRUE)[[1]])
})
context("Count missing")
test_that("count missing works",{
a <- c(1, 2, 3)
b <- c(1, 2, 3, NA)
expect_equal(count_missing(a),0)
expect_equal(count_missing(b),1)
})
context("Summary stats")
test_that("summarystats give a list",{
a <- c(1, 2, 3)
b <- c(1, 2, 3, NA)
expect_is(summary_stats(a),list)
})
context("Summary stats")
test_that("summarystats give a list",{
a <- c(1, 2, 3)
b <- c(1, 2, 3, NA)
expect_named(summary_stats(a),c(minimum,percent10,quartile1,median,mean,quartile3
,percent90,maximum,range,stdev,missing))
})
context("Summary stats")
test_that("summarystats give a list",{
a <- c(1, 2, 3)
b <- c(1, 2, 3, NA)
expect_type(summary_stats(a),list)
})
context("Summary stats")
test_that("summarystats give a list",{
a <- c(1, 2, 3)
b <- c(1, 2, 3, NA)
expect_object(summary_stats(a),list)
})
context("Summary stats")
test_that("summarystats give a list",{
a <- c(1, 2, 3)
b <- c(1, 2, 3, NA)
expect_object(summary_stats(a),vector)
})
context("Summary stats")
test_that("summarystats give a list",{
a <- c(1, 2, 3)
b <- c(1, 2, 3, NA)
expect_type(summary_stats(a),vector)
})
?expected_true
?expect_true
context("Summary stats")
test_that("summarystats give a list",{
a <- c(1, 2, 3)
b <- c(1, 2, 3, NA)
expect_true(is.list(summary_stats(a)))
expect_true(is.list(summary_stats(b)))
})
context("Rescale")
test_that("rescale works",{
b <- c(18, 15, 16, 4, 17, 9)
expect_equal(rescale100(b, xmin = 0, xmax = 20),c(90,75,80,20,85,45))
})
context("Drop lowest")
test_that("drop lowest works",{
b <- c(10, 10, 8.5, 4, 7, 9)
expect_equal(drop_lowest(b), c(10.0 ,10.0, 8.5, 7.0, 9.0))
})
context("Score homeworks")
test_that("score_homeworks works by optional argument drop",{
hws <- c(100, 80, 30, 70, 75, 85)
expect_equal(score_homework(hws,drop=TRUE),82)
expect_equal(score_homework(hws,drop=FALSE),73.33333)
})
context("Score homeworks")
test_that("score_homeworks works by optional argument drop",{
hws <- c(100, 80, 30, 70, 75, 85)
expect_equal(score_homework(hws,drop=TRUE),82)
expect_equal(score_homework(hws,drop=FALSE),73.33333e-06)
})
context("Score homeworks")
test_that("score_homeworks works by optional argument drop",{
hws <- c(100, 80, 30, 70, 75, 85)
expect_equal(score_homework(hws,drop=TRUE),82)
expect_equal(score_homework(hws,drop=FALSE),220/3)
})
context("Score quiz")
test_that("score quiz works with optional argument drop",{
quizzes <- c(100, 80, 70, 0)
expect_equal(score_quiz(quizzes,drop = TRUE),250/3)
expect_equal(score_quiz(quizzes,drop = FALSE),62.5)
})
context("SCore lab")
test_that("score lab works with different attendance range",{
expect_equal(score_lab(12),100)
expect_equal(score_lab(10),80)
expect_equal(score_lanb(6),0)
})
context("SCore lab")
test_that("score lab works with different attendance range",{
expect_equal(score_lab(12),100)
expect_equal(score_lab(10),80)
expect_equal(score_lab(6),0)
})
# test script
library(testthat)
# source in functions to be tested
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R'
)
?source
source("C:/Users/eriko/stat133/stat133-hws-fall17/hw04/code/functions.R")
source("C:/Users/eriko/stat133/stat133-hws-fall17/hw04/code/functions.R",local=TRUE)
source("C:/Users/eriko/stat133/stat133-hws-fall17/hw04/code/functions.R",local=TRUE,keep.source = TRUE)
source('C:/Users/eriko/stat133/stat133-hws-fall17/hw04/code/functions.R')
source('C:/Users/eriko/stat133/stat133-hws-fall17/hw04/code/functions.R', echo=TRUE)
source('C:/Users/eriko/stat133/stat133-hws-fall17/hw04/code/functions.R', echo=TRUE)
source('C:/Users/eriko/stat133/stat133-hws-fall17/hw04/code/functions.R', echo=TRUE)
source('C:/Users/eriko/stat133/stat133-hws-fall17/hw04/code/functions.R', echo=TRUE)
#' @title  get_minimum
#' @description a function to find the minimum value
#' @parameter x numeric vector
#' @param na.rm whether to remove missing values
#' @return  the minimum in a vector
#' @example
#' @get_minimum(a)
get_minimum <- function(x,na.rm=TRUE){
if(na.rm==TRUE){
x <- remove_missing(x)}else{
x=x
}
if(is.numeric(x)){
min <- sort(x)[1]
return(min)
} else{
stop("non-numeric vector")
}
}
#' @title  get_minimum
#' @description a function to find the minimum value
#' @parameter x numeric vector
#' @param na.rm whether to remove missing values
#' @return  the minimum in a vector
#' @example
#' @get_minimum(a)
get_minimum <- function(x,na.rm=TRUE){
if(na.rm==TRUE){
x <- remove_missing(x)}else{
x=x
}
if(is.numeric(x)){
min <- sort(x)[1]
return(min)
} else{
stop("non-numeric vector")
}
}
#' @title  get_minimum
#' @description a function to find the minimum value
#' @parameter x numeric vector
#' @param na.rm whether to remove missing values
#' @return  the minimum in a vector
#' @example
#' @get_minimum(a)
get_minimum <- function(x,na.rm=TRUE){
if(na.rm==TRUE){
x <- remove_missing(x)}else{
x=x
}
if(is.numeric(x)){
min <- sort(x)[1]
return(min)
} else{
stop("non-numeric vector")
}
}
# test script
library(testthat)
# source in functions to be tested
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
getwd()
source('functions.R')
#' @title  get_minimum
#' @description a function to find the minimum value
#' @parameter x numeric vector
#' @param na.rm whether to remove missing values
#' @return  the minimum in a vector
#' @example
#' @get_minimum(a)
get_minimum <- function(x,na.rm=TRUE){
if(na.rm==TRUE){
x <- remove_missing(x)}else{
x=x
}
if(is.numeric(x)){
min <- sort(x)[1]
return(min)
} else{
stop("non-numeric vector")
}
}
source('functions.R')
source(file = 'functions.R')
source('C:/Users/eriko/stat133/stat133-hws-fall17/hw04/code/functions.R')
source('C:/Users/eriko/stat133/stat133-hws-fall17/hw04/code/functions.R', echo=TRUE)
source(file = 'functions.R')
getwd()
read.csv("../data/rawdata/rawscore.csv")
read.csv(file = '../data/rawdata/rawscore.csv')
read.csv(file = '../data/rawdata/rawscores.csv')
dat <- read.csv(file = '../data/rawdata/rawscores.csv')
sink('../output/summary-rawscores.txt')
summary_stats(dat)
print_stats(dat)
sink()
sink('../output/summary-rawscores.txt')
str(dat)
summary_stats(dat)
print_stats(dat)
sink()
str(dat)
dat[is.na(2),1]
dat[,1][1]
head(dat)
for(i in 1:16){
for(j in 1:335){
dat[is.na(j),i] <- 0
}
}
for(i in 1:16){
for(j in 1:335){
dat[is.na(j),i] <- 0
}
}
dat
for(i in 1:16){
for(j in 1:334){
dat[,i][is.na(j)] <- 0
}
}
dat
## write a for() loop to replace all missing values NA with zero.
for(i in 1:16){
col <- dat[,i]
col[is.na(col)] <- 0
}
dat
col <- dat[,1]
col
dat[1,1]
dat[,1]
dat[1,]
dat[,2]
dat[1,]
dat[2,]
?read.csv
dat <- read.csv(file = '../data/rawdata/rawscores.csv',header = FALSE)
dat
dat <- read.csv(file = '../data/rawdata/rawscores.csv',header = TRUE)
dat
dat[,HW1]
dat[ ,2]
dat[,c("HW1")]
dat <- read.csv(file = '../data/rawdata/rawscores.csv',col.names = "V")
dat <- read.csv(file = '../data/rawdata/rawscores.csv',header=TRUE, col.names = "V")
dat <- read.csv(file = '../data/rawdata/rawscores.csv',header=TRUE, col.names = V)
source('C:/Users/eriko/stat133/stat133-hws-fall17/hw04/code/clean-data-script.R', echo=TRUE)
dat <- read.csv(file = '../data/rawdata/rawscores.csv',header=TRUE, col.names = 1:16)
dat
dat[,2]
library(dplyr)
slice(dat,2)
select(dat,2)
for(i in 1:16){
col <- select(dat,i)
col[is.na(col)] <- 0
}
dat
col <- select(dat,2)
col
col[is.na(col)]
col[is.na]
dat[1,1]
dat[,2]
dat[1,]
col[is.na(col)] <- 0
col
for(i in 1:ncol(dat)){
col <- select(dat,i)
col[is.na(col)] <- 0
}
dat
dat <- read.csv(file = '../data/rawdata/rawscores.csv',stringsAsFactors = FALSE)
dat[,2]
for(i in 1:ncol(dat)){
dat[,i][is.na(dat[,i])] <- 0
}
dat
rescale100(dat$QZ1,xmin = 0,xmax = 12)
dat$QZ1
mutate(dat,Test1=rescale100(dat$EX1,xmin = 0,xmax = 80))
hws <- dat[,1:9]
Homework=score_homework(hws,drop = TRUE)
dat[,1:9]
hws <- dat[,1:9]
mutate(dat,Homework=score_homework(hws,drop = TRUE))
Homework <- c(rep(0,334))
for (i in 1:334){
hws <- dat[i,1:9]
Homework[i] <- score_homework(hws,drop = TRUE)
}
Homework
Homework <- rep(0,334)
for (i in 1:334){
hws <- dat[i,1:9]
Homework[i] <- score_homework(hws,drop = TRUE)
}
Homework
score_homework(dat[,1:9],drop = TRUE)
lapply(dat[,1:9],score_homework)
apply(dat[,1:9],1,score_homework)
?lapply
apply(dat[,1:9],2,score_homework)
apply(dat[,1:9],1,score_homework)[1]
apply(dat[,1:9],1,score_homework)[[1]]
apply(dat[,1:9],1,score_homework)[[2]]
apply(dat[,1:9],1,score_homework)[2]
apply(dat[,1:9],1,score_homework)[2]
lapply(dat[,1:9],1,score_homework)
apply(dat[,1:9],1,score_homework)
score_homework(dat[334,1:9],drop = TRUE)
apply(as.numeric(dat[,1:9]),1,score_homework)
apply(as.list(dat[,1:9]),1,score_homework)
apply(as.vector(dat[,1:9]),1,score_homework)
apply(as.vector(dat[,1:9]),1,score_homework(drop = TRUE))
apply(dat[,1:9],1,score_homework(drop = TRUE))
Homework <- c(rep(0,334))
for(i in 1:334){
Homework[i] <- score_homework(dat[i,1:9],drop = TRUE)
}
Homework <- c(rep(0,334))
for(i in 1:334){
Homework[i] <- score_homework(dat[i,1:9],drop = TRUE)
}
## use rescale100() to add a variable Test1 by rescaling EX1: 0 is the min and 80 the max
dat <- mutate(dat,Test1=rescale100(dat$EX1,xmin = 0,xmax = 80))
## use rescale100() to add a variable Test2 by rescaling EX2: 0 is the min 90 the max
dat <- mutate(dat,Test2=rescale100(dat$EX2,xmin = 0,xmax = 90))
Homework <- apply(dat[,1:9],1,score_homework)
dat <- mutate(dat,Homework)
dat
Quiz <- apply(dat[,11:14],1,score_quiz)
dat <- mutate(dat,Quiz)
Overall <- c()
for(i in 1:nrow(dat)){
Overall[i] <- score_lab(dat[i,10])*0.1+Homework[i]*0.3+Quiz[i]*0.15+
Test1[i]*0.2+Test2[i]*0.25
}
Homework
dat
dat[,"Homework"]
dat
dat[1,19] <- 100
dat
Overall <- c()
for(i in 1:nrow(dat)){
Overall[i] <- score_lab(dat[i,10])*0.1+dat[i,19]*0.3+Quiz[i]*0.15+
Test1[i]*0.2+Test2[i]*0.25
}
dat[2,19]
dat[2,19][2]
dat[2,19][1
]
dat
Overall <- c()
for(i in 1:nrow(dat)){
Overall[i] <- score_lab(dat[i,10])*0.1+score_homework(dat[i,1:9])*0.3+Quiz[i]*0.15+
Test1[i]*0.2+Test2[i]*0.25
}
Test[1]
Test1[1]
Overall <- c()
for(i in 1:nrow(dat)){
Overall[i] <- score_lab(dat[i,10])*0.1+score_homework(dat[i,1:9])*0.3+dat$Quiz[i]*0.15+
dat$Test1[i]*0.2+dat$Test2[i]*0.25
}
dat$Test2[2]
score_lab(dat[1,10])
score_homework(dat[i,1:9])
score_homework(dat[1,1:9])
dat[1,1:9]
?lapply
lapply(dat$Homework,function(x)x*0.3)
Overall <- lapply(dat$Homework,function(x)x*0.3)+lapply(dat$ATT,score_lab)*0.1+
lapply(dat$Quiz,function(x)x*0.15)+lapply(dat$Test1,function(x)x*0.2)+lapply(dat$Test2,function(x)x*0.25)
lapply(dat$ATT,score_lab)
lapply(score_lab(dat$ATT),function(x)x*0.1)
lapply(apply(dat[,10],score_lab),function(x)x*0.1)
lapply(apply(dat[,10],1,FUN=score_lab),FUN=function(x)x*0.1)
Overall <- lapply(dat$Homework,function(x)x*0.3)+ lapply(dat$Quiz,function(x)x*0.15)+lapply(dat$Test1,function(x)x*0.2)+lapply(dat$Test2,function(x)x*0.25)
lapply(dat$Homework,function(x)x*0.3)
lapply(dat$Quiz,function(x)x*0.15)
lapply
lapply(score_lab(dat$ATT),function(x)x*0.1)
lapply(dat$Quiz,function(x)x*0.15)
lapply(dat$Test2,function(x)x*0.25)
apply(dat[,10],score_lab)
apply(dat[,10],score_lab)
lab <- lapply(dat[ ,10],FUN = score_lab)
lab <- as.numeric(lab)
dat$ATT <- lab
hw <- lapply(dat$Homework,function(x)x*0.3)
qz <- lapply(dat$Quiz,function(x)x*0.15)
t1 <- lapply(dat$Test1,function(x)x*0.2)
t2 <- lapply(dat$Test2,function(x)x*0.25)
lab <- lapply(dat$ATT,function(x)x*0.1)
Overall <- lapply(seq_along(lab),function(x){unlist(lab[x])+unlist(hw[x])+unlist(qz[x])
+unlist(t1[x])+unlist(t2[x])})
Overall <- lapply(seq_along(lab),function(x){unlist(lab[x])+unlist(hw[x])+unlist(qz[x])
+unlist(t1[x])+unlist(t2[x])})
mutate(dat,Overall=as.numeric(Overall))
Overall <- lapply(seq_along(lab),function(x)unlist(lab[x])+unlist(hw[x])+unlist(qz[x])
+unlist(t1[x])+unlist(t2[x]))
mutate(dat,Overall=as.numeric(Overall))
Overall <- lapply(seq_along(lab),function(x)unlist(lab[x])+unlist(hw[x])+unlist(qz[x])
+unlist(t1[x])+unlist(t2[x]))
mutate(dat,Overall=as.numeric(Overall))
dat
dat <- mutate(dat,Overall=as.numeric(Overall))
g=c()
for(i in 1:334){
if(dat$Overall[i]>=0 & dat$Overall[i]<50){g[i]="F"}
else if(dat$Overall[i]>=50 & dat$Overall[i]<60){g[i]="D"}
else if(dat$Overall[i]>=60 & dat$Overall[i]<70){g[i]="C-"}
else if(dat$Overall[i]>=70 & dat$Overall[i]<77.5){g[i]="C"}
else if(dat$Overall[i]>=77.5 & dat$Overall[i]<79.5){g[i]="C+"}
else if(dat$Overall[i]>=79.5 & dat$Overall[i]<82){g[i]="B-"}
else if(dat$Overall[i]>=82 & dat$Overall[i]<86){g[i]="B"}
else if(dat$Overall[i]>=86 & dat$Overall[i]<88){g[i]="B+"}
else if(dat$Overall[i]>=88 & dat$Overall[i]<90){g[i]="A-"}
else if(dat$Overall[i]>=90 & dat$Overall[i]<95){g[i]="A"}
else{g="A+"}
}
mutate(dat,g)
dat <- mutate(dat,g)
sink('../output/Lab-stats.txt')
summary_stats(dat$ATT)
print_stats(dat$ATT)
sink()
sink('../output/Homework-stats.txt')
summary_stats(dat$Homework)
print_stats(dat$Homework)
sink()
sink('../output/Quiz-stats.txt')
summary_stats(dat$Quiz)
print_stats(dat$Quiz)
sink()
sink('../output/Test1-stats.txt')
summary_stats(dat$Test1)
print_stats(dat$Test1)
sink()
sink('../output/Test2-stats.txt')
summary_stats(dat$Test2)
print_stats(dat$Test2)
sink()
sink('../output/Overall-stats.txt')
summary_stats(dat$Overall)
print_stats(dat$Overall)
sink()
sink('../output/summary-cleanscores.txt')
str(dat)
sink()
write.csv(dat,file = '../data/cleandata/cleanscores.csv')
write.csv(dat,'../data/cleandata/cleanscores.csv')
dat$Homework <- unlist(Homework)
Homework <- c(100,unlist(Homework))
dat$Homework <- Homework
dat$Quiz <- unlist(Quiz)
write.csv(dat,'../data/cleandata/cleanscores.csv')
sink('../output/Test2-stats.txt')
write.csv(dat,'../data/cleandata/cleanscores.csv')
write.csv(dat,'../data/cleandata/cleanscores.csv')
View(gt_85)
